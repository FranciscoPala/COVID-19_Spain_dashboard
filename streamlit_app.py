import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pathlib
import plotly.express as px
from utils.funcs import *
from io import BytesIO

# set cwd
cwd = pathlib.Path.cwd()
# streamlit page config
st.set_page_config(
    page_title='Covid-19 Dashboard Spain',
    layout = 'wide',
)
# split into sections
sections = [
    "Overview",
    "Analysis by Age Group",
    "Analysis By Province",
    "Predictions",
]
rad = st.sidebar.radio(
    "Navigation",
    sections
)
# Overview Page
if rad== "Overview":
    st.markdown("""
    # Covid-19 Dashboard For Spain
    #### *Developed By Francisco Pal√°*
    ***
    """)
    
    st.markdown("""
    ## Overview
    Data has been gathered from [The Ministry of Health](https://cnecovid.isciii.es/covid19/).
    The wave variable has been generated by calculating the peaks and choosing the minimum value between peaks as waves frontiers.
    """)

    if st.button('Update Data'):
        new_data = get_data()
        new_data = get_waves(get_sma7,new_data)
        new_data.to_csv(cwd / 'data/covid_19_spain.csv', sep = ';', index=False)


# Time series by age group section
if rad == "Analysis by Age Group":
    # read csv to process
    data = pd.read_csv(cwd / 'data/covid_19_spain.csv', sep = ';')

    # Markdown text
    st.write("""
    # Time-Series Analysis by Age Group
    The purpose of these section is...
    """)

    st.write("""
    ## Cases
    """)
    st.write("""
    ### Daily Cases By Age
    """)

    # process the data to plot
    age_series = get_sma7_by_age(data)
    # plot cases
    fig = px.line(
        age_series, 
        x="date", 
        y="dailyCases", 
        color='age',
        template = 'simple_white',
        width=1600,
        height=500,
        title = '7-day Simple Moving Average of Daily Cases')
    
    st.plotly_chart(fig, use_container_width=True)

    st.write("""
    ### Within-Wave Distribution by Age and Total Cases
    """)

    # get data for heatmap data
    heatmap, wave_totals = get_sns_heatmap_data_cases(data)
    # plot heatmap + barplot
    # figure and spacing
    size_unit=np.array([1.7*1.77, 1])
    fig, ax = plt.subplots(1, 2, figsize=7*size_unit, gridspec_kw={"width_ratios": (.6, .4)})
    fig.subplots_adjust(wspace=0, hspace=0)
    # heatmap
    sns.heatmap(
        data = heatmap, 
        annot=True, 
        linewidths=0.1, 
        cmap='Blues', 
        fmt='.2f', 
        ax = ax[0],
        )
    # barplot
    sns.barplot(
        data = wave_totals, 
        x='cases', 
        y='wave', 
        orient = 'h', 
        color=sns.color_palette()[0], 
        ax=ax[1],
        alpha=0.8,
        )
    # despine barplot
    sns.despine(fig=fig, ax=ax[1], top=True, bottom=True, left=True, right=True)
    # Axes styling
    ax[0].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].set(
        ylabel=None,
        xlabel=None,
        yticklabels=[],
        xticklabels=[],
        xticks=[],
        )
    # show labels
    ax[1].bar_label(
        ax[1].containers[0],
        fmt='%.0f',
        padding=7,
        )
    # titles
    ax[0].set_title('Distribution of Cases Within Wave by Age')
    ax[1].set_title('Total Cases by Wave (Thousands)')

    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

    st.write("""
    ## Hospitalizations
    """)
    st.write("""
    ### Daily Hospitalizations By Age
    """)

    # plot hospitalizations
    fig = px.line(
        age_series, 
        x="date", 
        y="dailyHospitalizations", 
        color='age',
        template = 'simple_white',
        width=1600,
        height=500,
        title = '7-day Simple Moving Average of Daily Hospitalizations')
    st.plotly_chart(fig, use_container_width=True)

    st.write("""
    ### Within-Wave Distribution by Age and Total Hospitalizations
    """)

    # get data for heatmap data
    heatmap, wave_totals = get_sns_heatmap_data_hospitalizations(data)
    # plot heatmap + barplot
    # figure and spacing
    size_unit=np.array([1.7*1.77, 1])
    fig, ax = plt.subplots(1, 2, figsize=7*size_unit, gridspec_kw={"width_ratios": (.6, .4)})
    fig.subplots_adjust(wspace=0, hspace=0)
    # heatmap
    sns.heatmap(
        data = heatmap, 
        annot=True, 
        linewidths=0.1, 
        cmap='Blues', 
        fmt='.2f', 
        ax = ax[0],
        )
    # barplot
    sns.barplot(
        data = wave_totals,
        x='hospitalizations', 
        y='wave', 
        orient = 'h', 
        color=sns.color_palette()[0], 
        ax=ax[1],
        alpha=0.8,
        )
    # despine barplot
    sns.despine(fig=fig, ax=ax[1], top=True, bottom=True, left=True, right=True)
    # Axes styling
    ax[0].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].set(
        ylabel=None,
        xlabel=None,
        yticklabels=[],
        xticklabels=[],
        xticks=[],
        )
    # show labels
    ax[1].bar_label(
        ax[1].containers[0],
        fmt='%.0f',
        padding=7,
        )
    # titles
    ax[0].set_title('Distribution of Cases Within Wave by Age')
    ax[1].set_title('Total Hospitalizations by Wave')

    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)


    st.write("""
    ## ICU Admissions
    """)
    st.write("""
    ### Daily ICU Admissions By Age
    """)


    # plot ICU admissions
    fig = px.line(
        age_series, 
        x="date", 
        y="dailyICU", 
        color='age',
        template = 'simple_white',
        width=1600,
        height=500,
        title = '7-day Simple Moving Average of ICU Admissions')
    st.plotly_chart(fig, use_container_width=True)


    st.write("""
    ### Within-Wave Distribution by Age and Total ICU Admissions
    """)

    # get data for heatmap data
    heatmap, wave_totals = get_sns_heatmap_data_icu(data)
    # plot heatmap + barplot
    # figure and spacing
    size_unit=np.array([1.7*1.77, 1])
    fig, ax = plt.subplots(1, 2, figsize=7*size_unit, gridspec_kw={"width_ratios": (.6, .4)})
    fig.subplots_adjust(wspace=0, hspace=0)
    # heatmap
    sns.heatmap(
        data = heatmap, 
        annot=True, 
        linewidths=0.1, 
        cmap='Blues', 
        fmt='.2f', 
        ax = ax[0],
        )
    # barplot
    sns.barplot(
        data = wave_totals,
        x='icu', 
        y='wave', 
        orient = 'h', 
        color=sns.color_palette()[0], 
        ax=ax[1],
        alpha=0.8,
        )
    # despine barplot
    sns.despine(fig=fig, ax=ax[1], top=True, bottom=True, left=True, right=True)
    # Axes styling
    ax[0].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].set(
        ylabel=None,
        xlabel=None,
        yticklabels=[],
        xticklabels=[],
        xticks=[],
        )
    # show labels
    ax[1].bar_label(
        ax[1].containers[0],
        fmt='%.0f',
        padding=7,
        )
    # titles
    ax[0].set_title('Distribution of Cases Within Wave by Age')
    ax[1].set_title('Total ICU Admissions by Wave')

    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

    st.write("""
    ## Deaths
    """)
    st.write("""
    ### Daily Deaths By Age
    """)

    # plot deaths
    fig = px.line(
        age_series, 
        x="date", 
        y="dailyDeaths", 
        color='age',
        template = 'simple_white',
        width=1600,
        height=500,
        title = '7-day Simple Moving Average of Deaths')
    st.plotly_chart(fig, use_container_width=True)

    st.write("""
    ### Within-Wave Distribution by Age and Total Deaths
    """)

    # get data for heatmap data
    heatmap, wave_totals = get_sns_heatmap_data_deaths(data)
    # plot heatmap + barplot
    # figure and spacing
    size_unit=np.array([1.7*1.77, 1])
    fig, ax = plt.subplots(1, 2, figsize=7*size_unit, gridspec_kw={"width_ratios": (.6, .4)})
    fig.subplots_adjust(wspace=0, hspace=0)
    # heatmap
    sns.heatmap(
        data = heatmap, 
        annot=True, 
        linewidths=0.1, 
        cmap='Blues', 
        fmt='.2f', 
        ax = ax[0],
        )
    # barplot
    sns.barplot(
        data = wave_totals,
        x='deaths', 
        y='wave', 
        orient = 'h', 
        color=sns.color_palette()[0], 
        ax=ax[1],
        alpha=0.8,
        )
    # despine barplot
    sns.despine(fig=fig, ax=ax[1], top=True, bottom=True, left=True, right=True)
    # Axes styling
    ax[0].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].tick_params(axis=u'both', which=u'both',length=0)
    ax[1].set(
        ylabel=None,
        xlabel=None,
        yticklabels=[],
        xticklabels=[],
        xticks=[],
        )
    # show labels
    ax[1].bar_label(
        ax[1].containers[0],
        fmt='%.0f',
        padding=7,
        )
    # titles
    ax[0].set_title('Distribution of Cases Within Wave by Age')
    ax[1].set_title('Total Deaths by Wave')

    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)




if rad == "Analysis By Province":
    st.write('TODO')

if rad == "Predictions":
    st.write("TODO")