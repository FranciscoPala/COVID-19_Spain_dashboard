import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pathlib
from utils.funcs import *
from io import BytesIO

# set cwd
cwd = pathlib.Path.cwd()
# streamlit page config
st.set_page_config(
    page_title='Covid-19 Dashboard Spain',
    layout = 'wide',
)
# split into sections
rad = st.sidebar.radio(
    label = "Navigation",
    options = [
        "Overview",
        "Cases",
        "Hospitalizations",
        "ICU Admissions",
        "Deaths",
        "Predictions",
    ]
)
# read csv to process
data = pd.read_csv(cwd / 'data/covid_19_spain.csv', sep = ';')
prov = pd.read_csv(cwd / 'data/provincias.csv')
ccaa_map = prov.set_index('codigoProvincia').codigoCCAA
data['autonomousCommunity'] = data.province.str.strip().replace(ccaa_map)
pop = pd.read_csv(cwd / 'data/population_spain_10s.csv')
# Overview Page
if rad== "Overview":
    st.markdown("""
    # Covid-19 Dashboard For Spain
    #### *Developed By [Francisco Pal√°](https://www.linkedin.com/in/franciscopalab/)*
    ***
    """)
    
    st.markdown("""
    ## Overview
    - Covid ata has been gathered from [The Ministry of Health](https://cnecovid.isciii.es/covid19/).
    - The wave variable has been generated by calculating the peaks and choosing the minimum value between peaks as waves frontiers.
    - Province and Autonomous Community variables as well as population data has been gathered from the [Instituto Nacional de Estadistica](#https://www.ine.es/)
    """)

    if st.button('Update Data'):
        new_data = get_data()
        new_data = get_waves(get_sma7,new_data)
        new_data.to_csv(cwd / 'data/covid_19_spain.csv', sep = ';', index=False)

    data = pd.read_csv(cwd / 'data/covid_19_spain.csv', sep = ';')
    prov = pd.read_csv(cwd / 'data/provincias.csv')
    ccaa_map = prov.set_index('codigoProvincia').codigoCCAA
    data['autonomousCommunity'] = data.province.str.strip().replace(ccaa_map)
    st.markdown("""
    ### Covid Data
    """)
    st.dataframe(data)
    st.markdown("""
    ### Population Data
    """)
    st.dataframe(pop)

# Cases
if rad == "Cases":

    # Markdown text
    st.write("""
    # Cases
    The purpose of these section is...
    """)

    # ploty cases
    st.write("""
    ## Daily Cases By Age
    """)
    # process the data to plot
    age_series = get_sma7_by_age(data)
    fig = plot_lineplot(age_series, 'dailyCases')
    # send to streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # heatmap + totals by wave section
    st.write("""
    ## Within-Wave Distribution by Age and Total Cases
    """)

    # get data for heatmap and wave totals
    heatmap = get_heatmap_data(data, variable='cases')
    wave_totals = get_wave_totals(data)

    # plot heatmap + barplot
    fig = plot_heatmap(
        heatmap_data=heatmap, 
        barplot_data=wave_totals, 
        variable='cases')

    # save to image and 
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

    # heatmap + totals by age section
    st.write("""
    ## Distribution by Wave as Percentage of Total Age Group Population
    """)

    # get data for heatmap and wave totals
    heatmap = get_heatmap_data_age_norm(data,pop, variable='cases')
    wave_totals = get_wave_totals(data)

    # plot heatmap + barplot
    fig = plot_heatmap(
        heatmap_data=heatmap, 
        barplot_data=wave_totals, 
        variable='cases')

    # save to image and 
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

if rad == "Hospitalizations":
    # Markdown text
    st.write("""
    # Hospitalizations
    The purpose of these section is...
    """)
    st.write("""
    ## Daily Hospitalizations By Age
    """)
    # process the data to plot
    age_series = get_sma7_by_age(data)
    fig = plot_lineplot(age_series, 'dailyHospitalizations')
    st.plotly_chart(fig, use_container_width=True)

    st.write("""
    ## Within-Wave Distribution by Age and Total Hospitalizations
    """)

    # get data for heatmap and wave totals
    heatmap = get_heatmap_data(data, variable='hospitalizations')
    wave_totals = get_wave_totals(data)

    # plot heatmap + barplot
    fig = plot_heatmap(
        heatmap_data=heatmap, 
        barplot_data=wave_totals, 
        variable='hospitalizations')

    # save to image and 
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

if rad == "ICU Admissions":
    # Markdown text
    st.write("""
    # ICU
    The purpose of these section is...
    """)
    st.write("""
    ## Daily ICU By Age
    """)
    # process the data to plot
    age_series = get_sma7_by_age(data)
    fig = plot_lineplot(age_series, 'dailyICU')
    st.plotly_chart(fig, use_container_width=True)

    st.write("""
    ## Within-Wave Distribution by Age and Total ICU
    """)

    # get data for heatmap and wave totals
    heatmap = get_heatmap_data(data, variable='icu')
    wave_totals = get_wave_totals(data)

    # plot heatmap + barplot
    fig = plot_heatmap(
        heatmap_data=heatmap, 
        barplot_data=wave_totals, 
        variable='icu')

    # save to image and 
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

if rad == "Deaths":
    # Markdown text
    st.write("""
    # Deaths
    The purpose of these section is...
    """)
    st.write("""
    ## Daily Deaths By Age
    """)
    # process the data to plot
    age_series = get_sma7_by_age(data)
    fig = plot_lineplot(age_series, 'dailyDeaths')
    st.plotly_chart(fig, use_container_width=True)

    st.write("""
    ## Within-Wave Distribution by Age and Total Deaths
    """)

    # get data for heatmap and wave totals
    heatmap = get_heatmap_data(data, variable='deaths')
    wave_totals = get_wave_totals(data)

    # plot heatmap + barplot
    fig = plot_heatmap(
        heatmap_data=heatmap, 
        barplot_data=wave_totals, 
        variable='deaths')

    # save to image and 
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.image(buf)

if rad == "Predictions":
    st.write("TODO")